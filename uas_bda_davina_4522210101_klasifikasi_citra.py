# -*- coding: utf-8 -*-
"""UAS_BDA_Davina_4522210101_Klasifikasi Citra

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GWySasdHoxsS-lRFoyUhgOcidJ2CRTzf
"""

# Import Library
import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns


from sklearn.svm import SVC

from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import tensorflow as tf

"""## Import dan Load Dataset"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

base_path = '/content/drive/MyDrive/dataset_final'
classes = ['laptop_black', 'laptop_blue', 'laptop_grey']

# Load dataset dari folder
raw_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    base_path,
    labels='inferred',
    label_mode='int',
    image_size=(256, 256), # ukuran sementara
    batch_size=32,
    shuffle=True
)

class_names = raw_dataset.class_names
print("Daftar kelas:", class_names)

# Menampilkan dataset gambar
plt.figure(figsize=(15, 3 * len(class_names)))
images_per_class = {class_name: [] for class_name in class_names}

for images, labels in raw_dataset.unbatch():
    label = labels.numpy()
    class_name = class_names[label]
    if len(images_per_class[class_name]) < 5:
        images_per_class[class_name].append(images.numpy().astype("uint8"))
    if all(len(imgs) == 5 for imgs in images_per_class.values()):
        break

for class_idx, class_name in enumerate(class_names):
    for i in range(5):
        ax = plt.subplot(len(class_names), 5, class_idx * 5 + i + 1)
        plt.imshow(images_per_class[class_name][i])
        plt.title(class_name)
        plt.axis("off")

plt.tight_layout()
plt.show()

"""## Preprocessing Data"""

# Menentukan ukuran gambar
img_size = 100

X, y = [], []

for label in classes:
    folder = os.path.join(base_path, label)
    for img_name in os.listdir(folder):
        img_path = os.path.join(folder, img_name)
        try:
            # Resize gambar (100 x 100)
            img = load_img(img_path, target_size=(img_size, img_size))

            # Normalisasi piksel
            img_array = img_to_array(img) / 255.0

            X.append(img_array)
            y.append(label)
        except:
            print("Gagal muat gambar:", img_path)

X = np.array(X)
y = np.array(y)

# Label encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y_encoded = le.fit_transform(y)

plt.figure(figsize=(12, 6))
sample_area = (slice(0, 5), slice(0, 5))  # Mengambil area 5x5 piksel
channel = 2  # 0=R, 1=G, 2=B

for i, label in enumerate(classes):
    # Mengambil gambar pertama dari kelas
    contoh_gambar = os.listdir(os.path.join(base_path, label))[0]
    contoh_path = os.path.join(base_path, label, contoh_gambar)

    # Load gambar asli
    img_asli = load_img(contoh_path)
    ukuran_asli = img_asli.size
    img_asli_arr = img_to_array(img_asli)

    # Resize + Normalisasi
    img_resize = load_img(contoh_path, target_size=(img_size, img_size))
    img_resize_arr = img_to_array(img_resize) / 255.0
    ukuran_resize = img_resize.size

    # Plot gambar asli
    plt.subplot(2, len(classes), i + 1)
    plt.imshow(img_asli)
    plt.title(f"Asli: {label}")
    plt.axis('off')

    # Plot gambar hasil Resize + Normalisasi
    plt.subplot(2, len(classes), i + 1 + len(classes))
    plt.imshow(img_resize_arr)
    plt.title(f"Resize + Norm: {label}")
    plt.axis('off')

    # Mengambil area 5x5 piksel channel B (0)
    sample_asli = img_asli_arr[sample_area[0], sample_area[1], channel]
    sample_norm = img_resize_arr[sample_area[0], sample_area[1], channel]

    # Print info detail
    print(f"\nGambar '{label}':")
    print(f" - Ukuran Asli: {ukuran_asli[1]} x {ukuran_asli[0]}")
    print(f" - Ukuran Resize: {ukuran_resize[1]} x {ukuran_resize[0]}")

    print("\nNilai Piksel (Channel B) Sebelum Normalisasi")
    print(pd.DataFrame(sample_asli.astype(int)))

    print("\nNilai Piksel (Channel B) Setelah Normalisasi")
    print(pd.DataFrame(np.round(sample_norm, 3)))

plt.tight_layout()
plt.show()

# Menampilkan sebelum dan sesudah Encoding
print("Label Asli & Encode untuk Masing-Masing Kelas:")
for i, label in enumerate(classes):
    # Ambil indeks pertama dari label
    idx = np.where(y == label)[0][0]
    print(f"Label Asli = {y[idx]}, Encode = {y_encoded[idx]}")

# Split data training dan testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, stratify=y_encoded, random_state=42)

print("Total gambar:", len(X))
print("Data train:", len(X_train))
print("Data test :", len(X_test))

# Menampilkan visualisasi data train dan test
plt.figure(figsize=(12, 4))
for i in range(5):
    plt.subplot(1, 5, i+1)
    plt.imshow(X_train[i])
    label = le.inverse_transform([y_train[i]])[0]
    plt.title(f"Train\n{label}")
    plt.axis("off")
plt.show()

plt.figure(figsize=(12, 4))
for i in range(5):
    plt.subplot(1, 5, i+1)
    plt.imshow(X_test[i])
    label = le.inverse_transform([y_test[i]])[0]
    plt.title(f"Test\n{label}")
    plt.axis("off")
plt.show()

"""## Ekstraksi Fitur untuk SVM dan Melakukan Pemodelan SVM"""

# Ekstraksi fitur Grayscale + Flatten
def flatten_gray(images):
    gray = np.mean(images, axis=-1)
    flat = gray.reshape(len(images), -1)
    return flat

X_train_svm = flatten_gray(X_train)
X_test_svm = flatten_gray(X_test)

print("Hasil fitur flatten:")
print(X_train_svm[0])
print("Dimensi fitur:", X_train_svm[0].shape)

# Support Vector Machine (SVM)
svm_model = SVC(kernel='linear', probability=True)
svm_model.fit(X_train_svm, y_train)

y_pred_svm = svm_model.predict(X_test_svm)

# Metrik Evaluasi
print("Akurasi SVM:", accuracy_score(y_test, y_pred_svm))
print("\nMetrik Evaluasi:")
print(classification_report(y_test, y_pred_svm, target_names=le.classes_))

# Confusion Matrix
cm_svm = confusion_matrix(y_test, y_pred_svm)
sns.heatmap(cm_svm, annot=True, fmt='d',
            xticklabels=le.classes_,
            yticklabels=le.classes_,
            cmap='Blues')

plt.title("Confusion Matrix")
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.show()

"""## Convolutional Neural Network (CNN)"""

# Split data
cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_size, img_size, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')
])


cnn_model.summary()

# Kompilasi dan Training
cnn_model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

history = cnn_model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))

# Prediksi Label Test
y_pred_cnn = np.argmax(cnn_model.predict(X_test), axis=1)

# Metrik Evaluasi
print("Akurasi CNN:", accuracy_score(y_test, y_pred_cnn))
print("\nMetrik Evaluasi:")
print(classification_report(y_test, y_pred_cnn, target_names=le.classes_))

# Confusion Matrix
cm_cnn = confusion_matrix(y_test, y_pred_cnn)
sns.heatmap(cm_cnn, annot=True, fmt='d',
            xticklabels=le.classes_,
            yticklabels=le.classes_,
            cmap='Greens')
plt.title("Confusion Matrix")
plt.xlabel("Prediksi")
plt.ylabel("Aktual")
plt.show()

# Menampilkan visualisasi prediksi beberapa gambar
def show_predictions(model_name, X_data, y_true, y_pred):
    plt.figure(figsize=(12, 6))
    plt.suptitle(f"Hasil Prediksi Model {model_name}", fontsize=16)
    for i in range(6):
        idx = np.random.randint(0, len(X_data))
        plt.subplot(2, 3, i+1)
        plt.imshow(X_data[idx])
        true_label = le.inverse_transform([y_true[idx]])[0]
        pred_label = le.inverse_transform([y_pred[idx]])[0]
        plt.title(f"True: {true_label}\nPred: {pred_label}")
        plt.axis("off")
    plt.tight_layout(rect=[0, 0, 1, 0.93])
    plt.show()

show_predictions("SVM", X_test, y_test, y_pred_svm)
show_predictions("CNN", X_test, y_test, y_pred_cnn)

"""## Perbandingan Performa"""

# Menghitung metrik SVM
svm_accuracy = accuracy_score(y_test, y_pred_svm)
svm_precision = precision_score(y_test, y_pred_svm, average='macro')
svm_recall = recall_score(y_test, y_pred_svm, average='macro')
svm_f1 = f1_score(y_test, y_pred_svm, average='macro')

# Menghitung metrik CNN
cnn_accuracy = accuracy_score(y_test, y_pred_cnn)
cnn_precision = precision_score(y_test, y_pred_cnn, average='macro')
cnn_recall = recall_score(y_test, y_pred_cnn, average='macro')
cnn_f1 = f1_score(y_test, y_pred_cnn, average='macro')

# Membuat Tabel
tabel_perbandingan = pd.DataFrame({
    "Metrik": ["Accuracy", "Precision", "Recall", "F1-Score"],
    "SVM": [svm_accuracy, svm_precision, svm_recall, svm_f1],
    "CNN": [cnn_accuracy, cnn_precision, cnn_recall, cnn_f1]
})

print("\nTabel Perbandingan Performa: ")
print(tabel_perbandingan)